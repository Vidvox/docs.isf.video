{"remainingRequest":"/Users/turner/Projects/new-isf-docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/turner/Projects/new-isf-docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/turner/Projects/new-isf-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/turner/Projects/new-isf-docs/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/turner/Projects/new-isf-docs/docs/ref/ref_converting.md?vue&type=template&id=c0675de0&","dependencies":[{"path":"/Users/turner/Projects/new-isf-docs/docs/ref/ref_converting.md","mtime":1541952936491},{"path":"/Users/turner/Projects/new-isf-docs/node_modules/cache-loader/dist/cjs.js","mtime":1542141147539},{"path":"/Users/turner/Projects/new-isf-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1542141147910},{"path":"/Users/turner/Projects/new-isf-docs/node_modules/cache-loader/dist/cjs.js","mtime":1542141147539},{"path":"/Users/turner/Projects/new-isf-docs/node_modules/vue-loader/lib/index.js","mtime":1542141147910},{"path":"/Users/turner/Projects/new-isf-docs/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1542141152593}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"converting-non-isf-glsl-shaders-to-isf\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#converting-non-isf-glsl-shaders-to-isf\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Converting Non-ISF GLSL shaders to ISF\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\"You should probably replace any calls in your shader to \"),\n          _c(\"code\", [_vm._v(\"texture2D()\")]),\n          _vm._v(\" or \"),\n          _c(\"code\", [_vm._v(\"texture2DRect()\")]),\n          _vm._v(\" with \"),\n          _c(\"code\", [_vm._v(\"IMG_NORM_PIXEL()\")]),\n          _vm._v(\" or \"),\n          _c(\"code\", [_vm._v(\"IMG_PIXEL()\")]),\n          _vm._v(\n            \", respectively. Images in ISF- inputs, persistent buffers, etc- can be accessed by either \"\n          ),\n          _c(\"code\", [_vm._v(\"IMG_NORM_PIXEL()\")]),\n          _vm._v(\" or \"),\n          _c(\"code\", [_vm._v(\"IMG_PIXEL()\")]),\n          _vm._v(\n            \", depending on whether you want to use normalized or non-normalized coordinates to access the colors of the image. If your shader isn't using these- if it's using \"\n          ),\n          _c(\"code\", [_vm._v(\"texture2D()\")]),\n          _vm._v(\" or \"),\n          _c(\"code\", [_vm._v(\"texture2DRect()\")]),\n          _vm._v(\n            \"- it won't compile if the host application tries to send it a different type of texture.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"Many shaders pass in the resolution of the image being rendered (knowing where the fragment being evaluated is located within the output image is frequently useful). By default, ISF automatically declares a uniform vec2 named \"\n          ),\n          _c(\"code\", [_vm._v(\"RENDERSIZE\")]),\n          _vm._v(\" which is passed the dimensions of the image being rendered.\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"If the shader you're converting requires a time value, note that the uniform float \"\n          ),\n          _c(\"code\", [_vm._v(\"TIME\")]),\n          _vm._v(\n            \" is declared, and passed the duration (in seconds) which the shader's been runing when the shader's rendered.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"Many shaders don't use (or even acknowledge) the alpha channel of the image being rendered. There's nothing wrong with this- but when the shader's loaded in an application that uses the alpha channel, the output of the shader can look bizarre and unpredictable (though it usually involves something being darker than it should be). If you run into this, try setting gl_FragColor.a to 1.0 at the end of your shader.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"gl_FragCoord.xy\")]),\n          _vm._v(\" contains the coordinates of the fragment being evaluated. \"),\n          _c(\"code\", [_vm._v(\"isf_FragNormCoord.xy\")]),\n          _vm._v(\n            \" contains the normalized coordinates of the fragment being evaluated.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"While ISF files are fragment shaders, and the host environment automatically generates a vertex shader, you can use your own vertex shader if you'd like. If you go this route, your vertex shader should have the same base name as your ISF file (just use the extension .vs), and the first thing you do in your vertex shader's main function is call \"\n          ),\n          _c(\"code\", [_vm._v(\"isf_vertShaderInit();\")]),\n          _vm._v(\".\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"If the shader you're converting requires imported graphic resources, note that the ISF format defines the ability to import image files by adding objects to your JSON dict under the \"\n          ),\n          _c(\"code\", [_vm._v(\"IMPORTED\")]),\n          _vm._v(\" key. The imported images are accessed via the usual \"),\n          _c(\"code\", [_vm._v(\"IMG_PIXEL()\")]),\n          _vm._v(\" or \"),\n          _c(\"code\", [_vm._v(\"IMG_NORM_PIXEL()\")]),\n          _vm._v(\n            \" methods. Details on how to do this are listed below, and examples are included.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            'If your texture doesn\\'t look right, make sure your texture coordinates are ranged properly (textures are typically \"clamped\" by the host implementation, if you specify an out-of-range texture coordinate it may look funny).'\n          )\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}